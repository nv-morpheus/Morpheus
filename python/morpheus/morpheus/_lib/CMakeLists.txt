# =============================================================================
# Copyright (c) 2020-2024, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
# =============================================================================
list(APPEND CMAKE_MESSAGE_CONTEXT "_lib")

########### morpheus ###########

#----------cudf_helpers---------
# This had to be inlined from cudf_helpers.cmake file because of scikit-build changes in
# https://github.com/scikit-build/scikit-build/pull/871
morpheus_add_cython_library(
    cudf_helpers
    PYX_FILE
      "cudf_helpers.pyx"
    INCLUDE_DIRS
      "include"
    LINK_TARGETS
      cudf::cudf
      pybind11::pybind11
      Python::Module
      Python::NumPy
    OUTPUT_TARGET
      cudf_helpers_target
)

set_property(GLOBAL PROPERTY cudf_helpers_target_property "${cudf_helpers_target}")

execute_process(
  COMMAND "${Python_EXECUTABLE}" -c "import pyarrow; print(pyarrow.get_include())"
  OUTPUT_VARIABLE PYARROW_INCLUDE_DIR
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

target_include_directories(${cudf_helpers_target}
  PRIVATE
    "${PYARROW_INCLUDE_DIR}"
    $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/autogenerated/include> # Include the generated version file
)

# This target generates headers used by other parts of the code base.
# The C++ checks used in CI need these headers but don't require an actual build.
# The `morpheus_style_checks` target allows these to be generated without a full build of Morpheus.
add_dependencies(${PROJECT_NAME}_style_checks ${cudf_helpers_target})

# We don't have control over the C++ code that cython generates, suppress the volatile warning raised by the compiler
target_compile_options(${cudf_helpers_target} PRIVATE -Wno-volatile)

# Disable clang-tidy and IWYU for cython generated code
set_target_properties(
  ${cudf_helpers_target}
    PROPERTIES
      CXX_CLANG_TIDY ""
      C_INCLUDE_WHAT_YOU_USE ""
      CXX_INCLUDE_WHAT_YOU_USE ""
      EXPORT_COMPILE_COMMANDS OFF
)

#----------lib_morpheus---------
include(cmake/libmorpheus.cmake)

########### py_morpheus ########
# Set the default link targets to avoid repeating this
morpheus_utils_python_package_set_default_link_targets(morpheus)

# #----------morpheus._lib.common---------
morpheus_add_pybind11_module(common SOURCE_FILES common/module.cpp)
set_property(GLOBAL APPEND PROPERTY py_morpheus_target_property morpheus._lib.common)

#----------morpheus._lib.stages---------
morpheus_add_pybind11_module(stages SOURCE_FILES stages/module.cpp)
set_property(GLOBAL APPEND PROPERTY py_morpheus_target_property morpheus._lib.stages)

#----------morpheus._lib.messages---------
morpheus_add_pybind11_module(messages SOURCE_FILES messages/module.cpp)
set_property(GLOBAL APPEND PROPERTY py_morpheus_target_property morpheus._lib.messages)

#----------morpheus._lib.modules---------
morpheus_add_pybind11_module(modules SOURCE_FILES modules/module.cpp)
set_property(GLOBAL APPEND PROPERTY py_morpheus_target_property morpheus._lib.modules)

#----------morpheus._lib.doca---------
if(MORPHEUS_SUPPORT_DOCA)
  add_subdirectory(doca)

  morpheus_add_pybind11_module(doca SOURCE_FILES doca/module.cpp LINK_TARGETS ${PROJECT_NAME}::morpheus_doca)
endif()

if (MORPHEUS_BUILD_TESTS)
  add_subdirectory(tests)
endif()

list(POP_BACK CMAKE_MESSAGE_CONTEXT)
