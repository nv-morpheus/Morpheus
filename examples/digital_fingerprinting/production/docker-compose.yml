# SPDX-FileCopyrightText: Copyright (c) 2022-2024, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

services:

  mlflow:
    restart: always
    build: ./mlflow
    image: mlflow_server
    container_name: mlflow_server
    ports:
      - "5000:5000"
    networks:
      - frontend
      - backend
    command: mlflow server --gunicorn-opts "--log-level debug" --backend-store-uri sqlite:////opt/mlflow/dbdata/mlflow.db --serve-artifacts --artifacts-destination /opt/mlflow/artifacts --host 0.0.0.0
    volumes:
      - db_data:/opt/mlflow/dbdata
      - mlflow_data:/opt/mlflow/artifacts

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper

  jupyter:
    restart: always
    build:
      context: ./
      dockerfile: ./Dockerfile
      target: jupyter
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            capabilities: [gpu]
    image: dfp_morpheus_jupyter
    container_name: jupyter
    ports:
      - "8888:8888"
    networks:
      - frontend
      - backend
    command: jupyter-lab --no-browser --allow-root --ip='*'
    volumes:
      - ../../..:/workspace
    depends_on:
      - mlflow
    profiles:
      - dev
    cap_add:
      - sys_nice

  morpheus_pipeline:
    # restart: always
    build:
      context: ./
      dockerfile: ./Dockerfile
      target: runtime
    image: dfp_morpheus
    container_name: morpheus_pipeline
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            capabilities: [gpu]
    networks:
      - frontend
      - backend
    environment:
      # Colorize the terminal in the container if possible
      TERM: "${TERM:-}"
      DFP_CACHE_DIR: "/workspace/.cache/dfp"
      DFP_TRACKING_URI: "http://mlflow:5000"
    command: ./launch.sh --train_users=generic --duration=1d --start_time "2022-08-01" --input_file="../../data/dfp/duo-training-data/*.json" --log_level INFO
    volumes:
      - ../../..:/workspace
    depends_on:
      - mlflow
    profiles:
      - training
    cap_add:
      - sys_nice

  grafana:
    image: grafana/grafana:10.0.0
    environment:
      GF_INSTALL_PLUGINS: "marcusolsson-csv-datasource"
    volumes:
      - ./grafana/config/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/config/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./grafana/dashboards/:/var/lib/grafana/dashboards/
      - ./grafana/datasources/:/etc/grafana/provisioning/datasources/
      - ./grafana:/workspace
    ports:
      - "3000:3000"
    networks:
      - frontend
      - backend
    depends_on:
      - loki

  loki:
    image: grafana/loki:2.9.3
    volumes:
      - ./grafana/config/loki-config.yml:/etc/loki/loki-config.yml
    ports:
      - "3100:3100"
    networks:
      - frontend
      - backend
    restart: unless-stopped
    command: -config.file=/etc/loki/loki-config.yml

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  db_data:
  mlflow_data:
